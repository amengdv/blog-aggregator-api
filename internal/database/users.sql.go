// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, email, name, password)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, created_at, updated_at, email, name, password, refresh_token, tkn_expires_at
`

type CreateUserParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Email     string
	Name      string
	Password  string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Email,
		arg.Name,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Name,
		&i.Password,
		&i.RefreshToken,
		&i.TknExpiresAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, created_at, updated_at, email, name, password, refresh_token, tkn_expires_at FROM users
WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Name,
		&i.Password,
		&i.RefreshToken,
		&i.TknExpiresAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, password FROM users
WHERE email = $1
`

type GetUserByEmailRow struct {
	ID       uuid.UUID
	Password string
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(&i.ID, &i.Password)
	return i, err
}

const updateRefreshToken = `-- name: UpdateRefreshToken :exec
UPDATE users
SET refresh_token = $1,
tkn_expires_at = $2
WHERE id = $3
`

type UpdateRefreshTokenParams struct {
	RefreshToken sql.NullString
	TknExpiresAt sql.NullTime
	ID           uuid.UUID
}

func (q *Queries) UpdateRefreshToken(ctx context.Context, arg UpdateRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, updateRefreshToken, arg.RefreshToken, arg.TknExpiresAt, arg.ID)
	return err
}

const updateUserEmail = `-- name: UpdateUserEmail :one
UPDATE users
SET email = $2, updated_at = $3
WHERE id = $1
RETURNING id, created_at, updated_at, email, name, password, refresh_token, tkn_expires_at
`

type UpdateUserEmailParams struct {
	ID        uuid.UUID
	Email     string
	UpdatedAt time.Time
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserEmail, arg.ID, arg.Email, arg.UpdatedAt)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Name,
		&i.Password,
		&i.RefreshToken,
		&i.TknExpiresAt,
	)
	return i, err
}

const updateUserName = `-- name: UpdateUserName :one
UPDATE users
SET name = $2, updated_at = $3
WHERE id = $1
RETURNING id, created_at, updated_at, email, name, password, refresh_token, tkn_expires_at
`

type UpdateUserNameParams struct {
	ID        uuid.UUID
	Name      string
	UpdatedAt time.Time
}

func (q *Queries) UpdateUserName(ctx context.Context, arg UpdateUserNameParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserName, arg.ID, arg.Name, arg.UpdatedAt)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Name,
		&i.Password,
		&i.RefreshToken,
		&i.TknExpiresAt,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :one
UPDATE users
SET password = $2, updated_at = $3
WHERE id = $1
RETURNING id, created_at, updated_at, email, name, password, refresh_token, tkn_expires_at
`

type UpdateUserPasswordParams struct {
	ID        uuid.UUID
	Password  string
	UpdatedAt time.Time
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserPassword, arg.ID, arg.Password, arg.UpdatedAt)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Name,
		&i.Password,
		&i.RefreshToken,
		&i.TknExpiresAt,
	)
	return i, err
}
